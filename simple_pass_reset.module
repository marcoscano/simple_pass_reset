<?php

/**
 * Implements hook_menu_alter().
 */
function simple_pass_reset_menu_alter(&$items) {
  // Drupal's default behavior is to show the user a log-in form before
  // their user profile.  We replace this item to skip the uneccesary step.
  $items['user/reset/%/%/%'] = array(
    'title' => 'Reset password',
    'access callback' => 'simple_pass_reset_pass_reset_access',
    'access arguments' => array(2, 3, 4),
    'page callback' => 'simple_pass_reset_pass_reset_page',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  // Better title on user pages.
  $items['user']['title callback'] = 'simple_pass_reset_menu_title_user';
}

/**
 * Access callback for use with Drupal's menu API.
 */
function simple_pass_reset_pass_reset_access($uid, $timestamp, $hashed_pass) {
  if (!drupal_anonymous_user()) {
    return FALSE;
  }

  // Following logic copied from user_pass_reset().
  // Time out, in seconds, until login URL expires. Defaults to 24 hours =
  // 86400 seconds.
  $timeout = variable_get('user_password_reset_timeout', 86400);
  $current = REQUEST_TIME;
  // Some redundant checks for extra security ?
  $users = user_load_multiple(array($uid), array('status' => '1'));
  if ($timestamp <= $current && $account = reset($users)) {
    // No time out for first time login.
    if ($account->login && $current - $timestamp > $timeout) {
      drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
      drupal_goto('user/password');
    }
    elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Page callback for use with Drupal's menu API.
 *
 * This page replaces core one-time login form provided by user_pass_reset().
 */
function simple_pass_reset_pass_reset_page($uid, $timestamp, $hashed_pass, $option = NULL) {
  module_load_include('inc', 'user', 'user.pages');
  // When $option is original or login, preserve original behavior.
  if ($option == 'original') {
    return drupal_get_form('user_pass_reset', $uid, $timestamp, $hashed_pass);
  }
  elseif ($option == 'login') {
    return drupal_get_form('user_pass_reset', $uid, $timestamp, $hashed_pass, $option);
  }
  else {
    // Show the user edit form instead of silly one-time login form.
    $account = user_load($uid);
    $form = drupal_get_form('user_profile_form', $account);
    return $form;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simple_pass_reset_form_user_profile_form_alter(&$form, &$form_state) {
  if (arg(0) == 'user' && arg(1) == 'reset' && drupal_anonymous_user()) {
    // This is not the normal profile edit form, but actually the password reset form.

    // Our submit handler will log the use in after form submit.
    $form['#submit'][] = 'simple_pass_reset_pass_reset_submit';

    // Require a new password.
    $form['account']['pass']['#required'] = TRUE;

    if (arg(5) == 'brief') {
      // Since the user is most interested in getting a working password, we don't need to show their picture, timezone, etc.
      foreach (element_children($form) as $key) {
        //dpm($form[$key], $key);
        if ($form[$key]['#type'] == 'fieldset') {
          $form[$key]['#access'] = FALSE;
        }
      }
      $form['account']['#access'] = TRUE;
      $form['actions']['#access'] = TRUE;
      $form['actions']['submit']['#value'] = t('Reset password');
      $form['account']['mail']['#access'] = FALSE;
    }

    // This is to avoid a PHP Notice in user_profile_form_submit().
    if (!isset($_SESSION)) {
      $_SESSION = array();
    }
  }
}

/**
 * Submit callback for Drupal form API.
 */
function simple_pass_reset_pass_reset_submit($form, &$form_state) {
  if (drupal_anonymous_user()) { // Sanity check.
    // This logic copied from user_pass_reset().
    $account = $form_state['user'];
    $GLOBALS['user'] = $form_state['user'];
    user_login_finalize();

    watchdog('user', 'User %name used one-time login link.', array('%name' => $account->name));
    // This message gets lost during session change! Not sure how to fix that.
    drupal_set_message(t('Your password has been reset.  Welcome back, %name.', array('%name' => format_username($account))));

    $form_state['redirect'] = 'user';
  }
}
